generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum UserRole {
  USER
  CUSTOMER
  SUBSCRIBER
  PROMO
  DISTRIBUTOR
  SHOPMANAGER
  EDITOR
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

model User {
  id               String    @id
  username         String    @unique
  firstName        String
  lastName         String
  displayName      String
  email            String    @unique
  passwordHash     String
  vatNumber        String?
  phoneNumber      Int
  streetAddress    String
  addressLine2     String?
  suburb           String?
  townCity         String
  postcode         String
  country          String
  position         String?
  natureOfBusiness String
  currentSupplier  String
  otherSupplier    String?
  resellingTo      String?
  salesRep         String
  website          String?
  companyName      String
  ckNumber         String?
  avatarUrl        String?
  bio              String?
  agreeTerms       Boolean   @default(false)
  role             UserRole  @default(USER)
  sessions         Session[]
  products         Product[]
  carts            Cart[]
  orders           Order[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Product {
  id             Int              @id
  userId         String
  productName    String           @map("product_name")
  category       String[]
  description    String
  sellingPrice   Float            @map("selling_price")
  isPublished    Boolean          @default(true)
  dynamicPricing DynamicPricing[]
  variations     Variation[]
  featuredImage  FeaturedImage?
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems      CartItem[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@map("products")
}

model DynamicPricing {
  id        Int     @id @default(autoincrement())
  from      String
  to        String
  type      String
  amount    String
  product   Product @relation(fields: [productId], references: [id])
  productId Int

  @@map("dynamic_pricing")
}

model Variation {
  id                Int        @id @default(autoincrement())
  name              String
  color             String
  size              String
  sku               String
  sku2              String
  variationImageURL String     @map("variation_image_URL")
  quantity          Int
  product           Product    @relation(fields: [productId], references: [id])
  productId         Int
  cartItems         CartItem[]

  @@map("variations")
}

model FeaturedImage {
  id        Int     @id @default(autoincrement())
  thumbnail String
  medium    String
  large     String
  product   Product @relation(fields: [productId], references: [id])
  productId Int     @unique

  @@map("featured_images")
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems CartItem[]
  order     Order?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id          Int        @id @default(autoincrement())
  productId   Int
  variationId Int?
  quantity    Int
  cartId      Int
  isActive    Boolean    @default(true)
  product     Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  variation   Variation? @relation(fields: [variationId], references: [id])
  cart        Cart       @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId, variationId])
  @@map("cart_items")
}

model Order {
  id                  String      @id @default(cuid())
  userId              String
  user                User        @relation(fields: [userId], references: [id])
  cartId              Int         @unique
  cart                Cart        @relation(fields: [cartId], references: [id])
  captivityBranch     String
  methodOfCollection  String
  salesRep            String?
  referenceNumber     String?
  firstName           String
  lastName            String
  companyName         String
  countryRegion       String
  streetAddress       String
  apartmentSuite      String?
  townCity            String
  province            String
  postcode            String
  phone               String
  email               String
  orderNotes          String?
  agreeTerms          Boolean
  receiveEmailReviews Boolean
  totalAmount         Float
  status              OrderStatus @default(PENDING)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  @@map("orders")
}
