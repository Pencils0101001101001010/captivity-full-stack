generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id               String    @id
  username         String    @unique
  firstName        String
  lastName         String
  displayName      String
  email            String    @unique
  passwordHash     String
  vatNumber        String?
  phoneNumber      Int
  streetAddress    String
  addressLine2     String?
  suburb           String?
  townCity         String
  postcode         String
  country          String
  position         String?
  natureOfBusiness String
  currentSupplier  String
  otherSupplier    String?
  resellingTo      String?
  salesRep         String
  website          String?
  companyName      String
  ckNumber         String?
  avatarUrl        String?
  bio              String?
  agreeTerms       Boolean   @default(false)
  role             UserRole  @default(USER)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  Product          Product[]
  sessions         Session[]

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Product {
  id                Int      @id @default(autoincrement())
  userId            String
  type              String
  sku               String
  name              String
  published         Boolean
  isFeatured        Boolean
  visibility        String
  shortDescription  String
  taxStatus         String
  inStock           Boolean
  backordersAllowed Boolean
  soldIndividually  Boolean
  allowReviews      Boolean
  categories        String
  tags              String
  imageUrl          String
  upsells           String?
  position          Int
  attribute1Name    String?
  attribute1Values  String?
  attribute2Name    String?
  attribute2Values  String?
  attribute1Default String?
  attribute2Default String?
  regularPrice      Float?
  stock             Int?
  updatedAt         DateTime @updatedAt
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("products")
}

enum UserRole {
  USER
  CUSTOMER
  SUBSCRIBER
  PROMO
  DISTRIBUTOR
  SHOPMANAGER
  EDITOR
  ADMIN
}
