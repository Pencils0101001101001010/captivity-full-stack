generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum UserRole {
  USER
  CUSTOMER
  SUBSCRIBER
  PROMO
  DISTRIBUTOR
  SHOPMANAGER
  EDITOR
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

model User {
  id               String    @id @default(uuid())
  username         String    @unique
  firstName        String
  lastName         String
  displayName      String
  email            String    @unique
  passwordHash     String
  vatNumber        String?
  phoneNumber      Int
  streetAddress    String
  addressLine2     String?
  suburb           String?
  townCity         String
  postcode         String
  country          String
  position         String?
  natureOfBusiness String
  currentSupplier  String
  otherSupplier    String?
  resellingTo      String?
  salesRep         String
  website          String?
  companyName      String
  ckNumber         String?
  avatarUrl        String?
  bio              String?
  agreeTerms       Boolean   @default(false)
  role             UserRole  @default(USER)
  sessions         Session[]
  products         Product[]
  cart             Cart?
  orders           Order[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Product {
  id             String           @id @default(uuid())
  userId         String
  productName    String           @map("product_name")
  category       String[]
  description    String
  sellingPrice   Float            @map("selling_price")
  isPublished    Boolean          @default(true)
  dynamicPricing DynamicPricing[]
  variations     Variation[]
  featuredImage  FeaturedImage?
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@map("products")
}

model DynamicPricing {
  id        String  @id @default(uuid())
  from      String
  to        String
  type      String
  amount    String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@map("dynamic_pricing")
}

model Variation {
  id                String      @id @default(uuid())
  name              String
  color             String
  size              String
  sku               String
  sku2              String
  variationImageURL String      @map("variation_image_URL")
  quantity          Int
  product           Product     @relation(fields: [productId], references: [id])
  productId         String
  cartItems         CartItem[]
  orderItems        OrderItem[]

  @@map("variations")
}

model FeaturedImage {
  id        String  @id @default(uuid())
  thumbnail String
  medium    String
  large     String
  product   Product @relation(fields: [productId], references: [id])
  productId String  @unique

  @@map("featured_images")
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id          String    @id @default(uuid())
  cartId      String
  variationId String
  quantity    Int
  cart        Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variation   Variation @relation(fields: [variationId], references: [id], onDelete: Cascade)

  @@map("cart_items")
}

model Order {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  captivityBranch    String
  methodOfCollection String
  salesRep           String?
  referenceNumber    String?
  firstName          String
  lastName           String
  companyName        String
  countryRegion      String
  streetAddress      String
  apartmentSuite     String?
  townCity           String
  province           String
  postcode           String
  phone              String
  email              String
  orderNotes         String?

  orderItems OrderItem[]
  status     OrderStatus @default(PENDING)

  totalAmount         Float
  agreeTerms          Boolean  @default(false)
  receiveEmailReviews Boolean? @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model OrderItem {
  id          String    @id @default(uuid())
  orderId     String
  variationId String
  quantity    Int
  price       Float
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variation   Variation @relation(fields: [variationId], references: [id], onDelete: Cascade)

  @@map("order_items")
}
