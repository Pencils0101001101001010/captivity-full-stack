generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum UserRole {
  USER
  CUSTOMER
  SUBSCRIBER
  PROMO
  DISTRIBUTOR
  SHOPMANAGER
  EDITOR
  ADMIN
  SUPERADMIN
  VENDOR
  VENDORCUSTOMER
  APPROVEDVENDORCUSTOMER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

model User {
  id               String    @id @default(uuid())
  wpId             String?   @unique
  resetToken       String?
  resetTokenExpiry DateTime?
  username         String    @unique
  firstName        String
  lastName         String
  displayName      String
  email            String    @unique
  passwordHash     String
  vatNumber        String?
  phoneNumber      String    @default("")
  streetAddress    String
  addressLine2     String?
  suburb           String?
  townCity         String
  postcode         String
  country          String
  position         String?
  natureOfBusiness String
  currentSupplier  String
  otherSupplier    String?
  resellingTo      String?
  salesRep         String
  website          String?
  companyName      String
  ckNumber         String?
  avatarUrl        String?
  bio              String?
  agreeTerms       Boolean   @default(false)
  role             UserRole  @default(USER)

  // Vendor-specific fields
  storeSlug          String?   @unique // URL-friendly store name
  storeName          String? // Display name for the store
  storeDescription   String? // Store description
  storeLogoUrl       String? // Store logo
  storeBannerUrl     String? // Store banner image
  storeTheme         String?   @default("default")
  isVendorActive     Boolean?  @default(false)
  vendorApprovedAt   DateTime?
  vendorRating       Float?
  vendorCategories   String[]  @default([])
  storeContactEmail  String? // Separate contact email for store
  storePhoneNumber   String? // Separate phone for store
  storeBusinessHours String? // Store operating hours
  storePolicy        String? // Store policies and terms
  storeSocialMedia   Json? // Social media links
  storeLocation      Json? // Store location details
  featured           Boolean   @default(false) // For featuring certain vendors

  // Regular user relations
  sessions     Session[]
  products     Product[]
  cart         Cart?
  orders       Order[]
  UserSettings UserSettings?

  // Vendor specific relations
  vendorProducts VendorProduct[]
  vendorOrders   VendorOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Product {
  id             String           @id @default(uuid())
  userId         String
  productName    String           @map("product_name")
  category       String[]
  description    String
  sellingPrice   Float            @map("selling_price")
  isPublished    Boolean          @default(true)
  dynamicPricing DynamicPricing[]
  variations     Variation[]
  featuredImage  FeaturedImage?
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@map("products")
}

model DynamicPricing {
  id        String  @id @default(uuid())
  from      String
  to        String
  type      String
  amount    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@map("dynamic_pricing")
}

model Variation {
  id                String      @id @default(uuid())
  name              String
  color             String
  size              String
  sku               String
  sku2              String
  variationImageURL String      @map("variation_image_URL")
  quantity          Int
  product           Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId         String
  cartItems         CartItem[]
  orderItems        OrderItem[]

  @@map("variations")
}

model FeaturedImage {
  id        String  @id @default(uuid())
  thumbnail String
  medium    String
  large     String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @unique

  @@map("featured_images")
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id          String    @id @default(uuid())
  cartId      String
  variationId String
  quantity    Int
  cart        Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variation   Variation @relation(fields: [variationId], references: [id], onDelete: Cascade)

  @@map("cart_items")
}

model Order {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  captivityBranch    String
  methodOfCollection String
  salesRep           String?
  referenceNumber    String?
  firstName          String
  lastName           String
  companyName        String
  countryRegion      String
  streetAddress      String
  apartmentSuite     String?
  townCity           String
  province           String
  postcode           String
  phone              String
  email              String
  orderNotes         String?

  orderItems OrderItem[]
  status     OrderStatus @default(PENDING)

  totalAmount         Float
  agreeTerms          Boolean  @default(false)
  receiveEmailReviews Boolean? @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model OrderItem {
  id          String    @id @default(uuid())
  orderId     String
  variationId String
  quantity    Int
  price       Float
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variation   Variation @relation(fields: [variationId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model UserSettings {
  id               String            @id @default(cuid())
  userId           String            @unique
  logoUrl          String?
  bannerUrl        String?
  storeDescription StoreDescription?
  storeName        String?
  contactEmail     String?
  phoneNumber      String?
  businessHours    String?
  storePolicy      String?
  socialMedia      Json? // { facebook?: string, instagram?: string, twitter?: string }
  location         Json? // { address: string, coordinates?: { lat: number, lng: number } }
  categories       String[]
  featured         Boolean           @default(false)
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  BannerImage      BannerImage[]
}

model StoreDescription {
  id              String       @id @default(cuid())
  mainDescription String
  description1    String?
  description2    String?
  description3    String?
  description4    String?
  userSettings    UserSettings @relation(fields: [userSettingsId], references: [id], onDelete: Cascade)
  userSettingsId  String       @unique
}

model BannerImage {
  id             String       @id @default(cuid())
  url            String
  userSettings   UserSettings @relation(fields: [userSettingsId], references: [id], onDelete: Cascade)
  userSettingsId String
  order          Int          @default(0) // For maintaining image order

  @@map("banner_images")
}

// Vendor-specific models
model VendorProduct {
  id             String                 @id @default(uuid())
  userId         String // Changed from vendorId
  productName    String                 @map("product_name")
  category       String[]
  description    String
  sellingPrice   Float                  @map("selling_price")
  isPublished    Boolean                @default(true)
  dynamicPricing VendorDynamicPricing[]
  variations     VendorVariation[]
  featuredImage  VendorFeaturedImage?
  user           User                   @relation(fields: [userId], references: [id], onDelete: Cascade) // Changed from vendor
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt

  @@map("vendor_products")
}

model VendorDynamicPricing {
  id              String        @id @default(uuid())
  from            String
  to              String
  type            String
  amount          String
  vendorProduct   VendorProduct @relation(fields: [vendorProductId], references: [id], onDelete: Cascade)
  vendorProductId String

  @@map("vendor_dynamic_pricing")
}

model VendorVariation {
  id                String            @id @default(uuid())
  name              String
  color             String
  size              String
  sku               String
  sku2              String
  variationImageURL String            @map("variation_image_URL")
  quantity          Int
  vendorProduct     VendorProduct     @relation(fields: [vendorProductId], references: [id], onDelete: Cascade)
  vendorProductId   String
  vendorOrderItems  VendorOrderItem[]

  @@map("vendor_variations")
}

model VendorFeaturedImage {
  id              String        @id @default(uuid())
  thumbnail       String
  medium          String
  large           String
  vendorProduct   VendorProduct @relation(fields: [vendorProductId], references: [id], onDelete: Cascade)
  vendorProductId String        @unique

  @@map("vendor_featured_images")
}

model VendorOrder {
  id     String @id @default(uuid())
  userId String // Changed from vendorId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade) // Changed from vendor

  captivityBranch    String
  methodOfCollection String
  salesRep           String?
  referenceNumber    String?
  firstName          String
  lastName           String
  companyName        String
  countryRegion      String
  streetAddress      String
  apartmentSuite     String?
  townCity           String
  province           String
  postcode           String
  phone              String
  email              String
  orderNotes         String?

  vendorOrderItems VendorOrderItem[]
  status           OrderStatus       @default(PENDING)

  totalAmount         Float
  agreeTerms          Boolean  @default(false)
  receiveEmailReviews Boolean? @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vendor_orders")
}

model VendorOrderItem {
  id                String          @id @default(uuid())
  vendorOrderId     String
  vendorVariationId String
  quantity          Int
  price             Float
  vendorOrder       VendorOrder     @relation(fields: [vendorOrderId], references: [id], onDelete: Cascade)
  vendorVariation   VendorVariation @relation(fields: [vendorVariationId], references: [id], onDelete: Cascade)

  @@map("vendor_order_items")
}
